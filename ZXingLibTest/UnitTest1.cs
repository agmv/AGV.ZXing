using AGV.ZXing;
using System.IO;
using System.Reflection;
using ZXing;
using System.Linq;

namespace AGV.ZXing.Tests;

[TestFixture]
public class Tests
{
    ZXingLib z = new ZXingLib();
    
    [SetUp]
    public void Setup() {}

    [TearDown]
    public void TearDown(){}

    [Test]
    [Category("Decode")]
    public void TestDescode_EAN13()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.EAN_13.png"), "EAN_13");
        
        var b = barcodes.First();        
        var m = b.metadata.First();
        Assert.That(b.value, Is.EqualTo("8413000065504"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.EAN_13.ToString()));
        Assert.That(m.key, Is.EqualTo("POSSIBLE_COUNTRY"));
        Assert.That(m.value, Is.EqualTo("\"ES\""));
    }

     [Test]
     [Category("Decode")]
    public void TestDecode_AZTEC()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.bar92.png"), "AZTEC");
        var b = barcodes.First();
        var m = b.metadata.ElementAt(1);

        Assert.That(b.value, Is.EqualTo("Demonstration Aztec Code symbol generated by libzint"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.AZTEC.ToString()));
        Assert.That(m.key, Is.EqualTo("AZTEC_EXTRA_METADATA"));
        Assert.That(m.value, Is.EqualTo("{\"Compact\":true,\"Datablocks\":35,\"Layers\":3}"));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_MAXICODE()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.maxicode.png"), "MAXICODE");
        var b = barcodes.First();
        var m = b.metadata.First();
        
        Assert.That(b.value, Is.EqualTo("[)>0196123450000222111MODE3"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.MAXICODE.ToString()));
        Assert.That(m.key, Is.EqualTo("ERROR_CORRECTION_LEVEL"));
        Assert.That(m.value, Is.EqualTo("\"2\""));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_RSS14()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.rss_14.png"), "RSS_14");
        var b = barcodes.First();
        
        Assert.That(b.value, Is.EqualTo("00821935106427"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.RSS_14.ToString()));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_RSS_E()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.rss_expanded.png"), "RSS_EXPANDED");
        var b = barcodes.First();
        
        Assert.That(b.value, Is.EqualTo("(11)100224(17)110224(3102)000100"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.RSS_EXPANDED.ToString()));
    }


    [Test]
    [Category("Decode")]
    public void TestDecode_PDF417()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.pdf417.png"), "PDF_417");
        var b = barcodes.First();
        var m = b.metadata.First();
        
        Assert.That(b.value, Is.EqualTo("DBARCODE 2D"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.PDF_417.ToString()));
        Assert.That(m.key, Is.EqualTo("ERROR_CORRECTION_LEVEL"));
        Assert.That(m.value, Is.EqualTo("\"0\""));
        m = b.metadata.ElementAt(1);
        Assert.That(m.key, Is.EqualTo("PDF417_EXTRA_METADATA"));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_Multi()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.multi-1d.jpg"), null);
        var b = barcodes.First();
        var m = b.metadata.First();        

        // EAN 13
        Assert.That(b.value, Is.EqualTo("9310779300005"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.EAN_13.ToString()));
        Assert.That(m.key, Is.EqualTo("POSSIBLE_COUNTRY"));
        Assert.That(m.value, Is.EqualTo("\"AU\""));

        // CODE 39
        b = barcodes.ElementAt(1);
        Assert.That(b.value, Is.EqualTo("CODE39"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.CODE_39.ToString()));

        // CODE 128
        b = barcodes.ElementAt(2);
        Assert.That(b.value, Is.EqualTo("Code 128"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.CODE_128.ToString()));

        // UPC_A
        b = barcodes.ElementAt(3);
        Assert.That(b.value, Is.EqualTo("012345678905"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.UPC_A.ToString()));
        m = b.metadata.First();
        Assert.That(m.key, Is.EqualTo("POSSIBLE_COUNTRY"));
        Assert.That(m.value, Is.EqualTo("\"US/CA\""));

        // CODE 128
        b = barcodes.ElementAt(4);
        Assert.That(b.value, Is.EqualTo("0200000123000017"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.CODE_128.ToString()));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_PHARMACODE()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.pharmacode.png"), "PHARMA_CODE");
        var b = barcodes.First();
        
        Assert.That(b.value, Is.EqualTo("12323"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.PHARMA_CODE.ToString()));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_IMB()
    {
        var barcodes = z.Decode(loadResource("ZXingLibTest.resources.imb.png"), "IMB");
        var b = barcodes.First();

        Assert.That(b.value, Is.EqualTo("0004000074510848240094306000000"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.IMB.ToString()));
    }


    private byte[] loadResource(string resourceName) {
        Stream? s = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);
        if (s == null)
            throw new System.Exception();
        var ms = new MemoryStream();
        s.CopyTo(ms);
        return ms.ToArray();        
    }

    // Encoding Tests
    [Test(Description = "Executes tests for encoding 1D barcodes")]
    [TestCase("692771017440", "UPC_A")]
    [TestCase("00123457", "UPC_E")]
    [TestCase("9780804816632", "EAN_13")]
    [TestCase("48512343", "EAN_8")]
    [TestCase("A40156B", "CODABAR")]
    [TestCase("TEST", "CODE_39")]
    [TestCase("00123457", "CODE_93")]    
    [TestCase("0123456789045678", "CODE_128")]
    [TestCase("(11)100224(17)110224(3102)000100", "CODE_128", true)]
    [TestCase("00012345678905", "ITF")]
    [Category("Encode")]
    public void TestEncode_1D(string contents, string format, bool gS1Format = false)
    {
        var bytes = z.Encode(contents, format, 200, 200, 10, false, false, gS1Format, "UTF-8", null, null, null);
        var barcodes = z.Decode(bytes, format);
        var b = barcodes.First();
        Assert.That(contents, Is.EqualTo(b.value));
    }

    [Test]
    [TestCase("test", "AZTEC")]
    [TestCase("␝01234567890␝45678", "DATA_MATRIX")]
    [TestCase("test", "PDF_417")]
    [TestCase("This is a test", "QR_CODE", "L")]
    [TestCase("This is a test", "QR_CODE", "M")]
    [TestCase("This is a test", "QR_CODE", "Q")]
    [TestCase("This is a test", "QR_CODE", "H")]
    [Category("Encode")]
    public void TestEncode_2D(string contents, string format, string? ecl = null)
    {
        var bytes = z.Encode(contents, format, 200, 200, 10, false, false, false, "UTF-8", ecl, null, null);
        var barcodes = z.Decode(bytes, format);
        var b = barcodes.First();
        Assert.That(contents, Is.EqualTo(b.value));
    }

    [Test]
    [TestCase("Q")]
    [TestCase("H")]
    [Category("Encode")]
    public void TestEncode_Overlay(string ecl) {
        const string Actual = "https://www.outsystems.com";
        var bytes = z.Encode(Actual, "QR_CODE", 330, 330, 0, false, false, false, "UTF-8", ecl, null, loadResource("ZXingLibTest.resources.osring.png"));
        var barcodes = z.Decode(bytes, "QR_CODE");
        var b = barcodes.First();        
        Assert.That(Actual, Is.EqualTo(b.value));

    }
}
