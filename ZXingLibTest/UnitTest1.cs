using System;
using System.IO;
using System.Reflection;
using ZXing;
using System.Linq;

namespace AGV.ZXing.Tests;

[TestFixture]
public class Tests
{
    ZXingLib z = new ZXingLib();
    byte[] overlay = new byte[]{};
    
    [SetUp]
    public void Setup() {
        overlay = loadResource("ZXingLibTest.resources.osring.png");
        Directory.CreateDirectory("output");
    }

    [TearDown]
    public void TearDown(){}

    [Test]
    [Category("Decode")]
    public void TestDescode_EAN13()
    {
        var barcode = z.Decode(loadResource("ZXingLibTest.resources.EAN_13.png"), null);
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        //var m = b.metadata.First();
        Assert.That(b.value, Is.EqualTo("8413000065504"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.EAN_13.ToString()));
        // Assert.That(m.key, Is.EqualTo("POSSIBLE_COUNTRY"));
        // Assert.That(m.value, Is.EqualTo("\"ES\""));
    }

     [Test]
     [Category("Decode")]
    public void TestDecode_AZTEC()
    {
        var barcode = z.Decode(loadResource("ZXingLibTest.resources.bar92.png"), "AZTEC");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        // var m = b.metadata.ElementAt(1);        
        Assert.That(b.value, Is.EqualTo("Demonstration Aztec Code symbol generated by libzint"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.AZTEC.ToString()));
        // Assert.That(m.key, Is.EqualTo("AZTEC_EXTRA_METADATA"));
        // Assert.That(m.value, Is.EqualTo("{\"Compact\":true,\"Datablocks\":35,\"Layers\":3}"));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_MAXICODE()
    {
        var barcode = z.Decode(loadResource("ZXingLibTest.resources.maxicode.png"), "MAXICODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();// var m = b.metadata.First();        
        Assert.That(b.value, Is.EqualTo("[)>0196123450000222111MODE3"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.MAXICODE.ToString()));
        // Assert.That(m.key, Is.EqualTo("ERROR_CORRECTION_LEVEL"));
        // Assert.That(m.value, Is.EqualTo("\"2\""));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_RSS14()
    {
        var barcode = z.Decode(loadResource("ZXingLibTest.resources.rss_14.png"), "RSS_14");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo("00821935106427"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.RSS_14.ToString()));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_RSS_E()
    {
        var barcode = z.Decode(loadResource("ZXingLibTest.resources.rss_expanded.png"), "RSS_EXPANDED");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();        
        Assert.That(b.value, Is.EqualTo("(11)100224(17)110224(3102)000100"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.RSS_EXPANDED.ToString()));
    }


    [Test]
    [Category("Decode")]
    public void TestDecode_PDF417()
    {
        var barcode = z.Decode(loadResource("ZXingLibTest.resources.pdf417.png"), "");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        // var m = b.metadata.First();        
        Assert.That(b.value, Is.EqualTo("DBARCODE 2D"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.PDF_417.ToString()));
        // Assert.That(m.key, Is.EqualTo("ERROR_CORRECTION_LEVEL"));
        // Assert.That(m.value, Is.EqualTo("\"0\""));
        // m = b.metadata.ElementAt(1);
        // Assert.That(m.key, Is.EqualTo("PDF417_EXTRA_METADATA"));
    }

    // [Test]
    // [Category("DecodeMulti")]
    // public void TestDecode_Multi()
    // {
    //     var barcodes = z.DecodeMulti(loadResource("ZXingLibTest.resources.multi-1d.jpg"), null);
    //     var b = barcodes.First();
    //     // var m = b.metadata.First();

    //     // EAN 13
    //     Assert.That(b.value, Is.EqualTo("9310779300005"));
    //     Assert.That(b.format, Is.EqualTo(BarcodeFormat.EAN_13.ToString()));
    //     // Assert.That(m.key, Is.EqualTo("POSSIBLE_COUNTRY"));
    //     // Assert.That(m.value, Is.EqualTo("\"AU\""));

    //     // CODE 39
    //     b = barcodes.ElementAt(1);
    //     Assert.That(b.value, Is.EqualTo("CODE39"));
    //     Assert.That(b.format, Is.EqualTo(BarcodeFormat.CODE_39.ToString()));

    //     // CODE 128
    //     b = barcodes.ElementAt(2);
    //     Assert.That(b.value, Is.EqualTo("Code 128"));
    //     Assert.That(b.format, Is.EqualTo(BarcodeFormat.CODE_128.ToString()));

    //     // UPC_A
    //     b = barcodes.ElementAt(3);
    //     Assert.That(b.value, Is.EqualTo("012345678905"));
    //     Assert.That(b.format, Is.EqualTo(BarcodeFormat.UPC_A.ToString()));
    //     // m = b.metadata.First();
    //     // Assert.That(m.key, Is.EqualTo("POSSIBLE_COUNTRY"));
    //     // Assert.That(m.value, Is.EqualTo("\"US/CA\""));

    //     // CODE 128
    //     b = barcodes.ElementAt(4);
    //     Assert.That(b.value, Is.EqualTo("0200000123000017"));
    //     Assert.That(b.format, Is.EqualTo(BarcodeFormat.CODE_128.ToString()));
    // }

    [Test]
    [Category("Decode")]
    public void TestDecode_PHARMACODE()
    {
        var barcode = z.Decode(loadResource("ZXingLibTest.resources.pharmacode.png"), "PHARMA_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo("12323"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.PHARMA_CODE.ToString()));
    }

    [Test]
    [Category("Decode")]
    public void TestDecode_IMB()
    {
        var barcode = z.Decode(loadResource("ZXingLibTest.resources.imb.png"), "IMB");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo("0004000074510848240094306000000"));
        Assert.That(b.format, Is.EqualTo(BarcodeFormat.IMB.ToString()));
    }


    private byte[] loadResource(string resourceName) {
        Stream? s = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);
        if (s == null)
            throw new Exception();
        var ms = new MemoryStream();
        s.CopyTo(ms);
        return ms.ToArray();        
    }

    // Encoding Tests
    [Test(Description = "Executes tests for encoding 1D barcodes")]
    [TestCase("692771017440", "UPC_A")]
    [TestCase("00123457", "UPC_E")]
    [TestCase("9780804816632", "EAN_13")]
    [TestCase("48512343", "EAN_8")]
    [TestCase("A40156B", "CODABAR")]
    [TestCase("TEST", "CODE_39")]
    [TestCase("00123457", "CODE_93")]    
    [TestCase("0123456789045678", "CODE_128")]
    [TestCase("(11)100224(17)110224(3102)000100", "CODE_128")]
    [TestCase("00012345678905", "ITF")]
    [Category("Encode")]
    public void TestEncode_1D(string contents, string format)
    {
        var bytes = z.Encode(contents, format, 300, 100, 10, true, false, false, "UTF-8", null, null, null);        
#if DEBUG
        File.WriteAllBytes($"output/{format}.png", bytes);
#endif
        var barcode = z.Decode(bytes, format);
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(contents, Is.EqualTo(b.value));
    }

    [Test(Description = "Executes tests for encoding GS1 barcodes")]
    [TestCase("CODE_128")]
    [TestCase("DATA_MATRIX")]
    [Category("Encode")]
    public void TestEncode_GS1(string format)
    {
        var contents = format == "CODE_123" ? $"{(char)0x00F1}01234567890{(char)0x00F1}45678" : $"{(char)29}01234567890{(char)29}45678";
        var bytes = z.Encode(contents, format, 300, 100, 10, true, false, true, "UTF-8", null, null, null);
#if DEBUG
        File.WriteAllBytes($"output/{format}_GS1.png", bytes);
#endif
        var barcode = z.Decode(bytes, format);
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo(contents));
    }

    [Test]
    [TestCase("test", "AZTEC")]
    [TestCase("␝01234567890␝45678", "DATA_MATRIX")]
    [TestCase("test", "PDF_417")]
    [TestCase("This is a test", "QR_CODE", "L")]
    [TestCase("This is a test", "QR_CODE", "M")]
    [TestCase("This is a test", "QR_CODE", "Q")]
    [TestCase("This is a test", "QR_CODE", "H")]
    [Category("Encode")]
    public void TestEncode_2D(string contents, string format, string? ecl = null)
    {
        var bytes = z.Encode(contents, format, 200, 200, 10, true, false, false, "UTF-8", ecl, null, null);
#if DEBUG
        File.WriteAllBytes($"output/{format}.png", bytes);
#endif
        var barcode = z.Decode(bytes, format);
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo(contents));
    }

    [Test]
    [TestCase("Q")]
    [TestCase("H")]
    [TestCase(null)]
    [Category("Encode")]
    public void TestEncode_Overlay(string ecl) {
        var bytes = z.Encode("https://www.outsystems.com", "QR_CODE", 330, 330, 0, true, false, true, "UTF-8", ecl, null, this.overlay);
#if DEBUG
        File.WriteAllBytes($"output/overlay_{ ecl }.png", bytes);
#endif
        var barcode = z.Decode(bytes, "QR_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo("https://www.outsystems.com"));
    }


    [Test]
    [TestCase("A40156B", "CODABAR")]    
    [TestCase("692771017440", "UPC_A")]
    [TestCase("00123457", "UPC_E")]
    [TestCase("9780804816632", "EAN_13")]
    [TestCase("48512343", "EAN_8")]
    [TestCase("TEST", "CODE_39")]
    [TestCase("00123457", "CODE_93")]    
    [TestCase("0123456789045678", "CODE_128")]
    [TestCase("(11)100224(17)110224(3102)000100", "CODE_128")]
    [TestCase("00012345678905", "ITF")]
    [Category("BarcodeLabel")]
    public void TestEncode_NotPureBarcode(string contents, string format)
    {
        var bytes = z.Encode(contents, format, 300, 100, 10, false, false, false, "UTF-8", null, null, null);
        var img = SixLabors.ImageSharp.Image.Load(new MemoryStream(bytes));
#if DEBUG
        File.WriteAllBytes($"output/{format}_label.png", bytes);
#endif
        var barcode = z.Decode(bytes, format);
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(contents, Is.EqualTo(b.value));
    }

    [Test]
    [TestCase("Event 1", true, 1, "Room A","This is event 1","PUBLIC","John Doe",5,true)]
    [TestCase("Event 2", false, 45, "Rua Central Park 2 2A","","PRIVATE","",5,true)]
    [Category("Extensions")]
    public void TestEncodeExt_CalendarEvent(string title, bool isAllDay, int duration, string location, string description, string eClass, string organizer, int priority, bool showAsBusy) {
        var s = isAllDay ? new DateTime(2023,4,11) : new DateTime(2023,4,11,18,0,0,DateTimeKind.Utc);
        var e = isAllDay ? new DateTime(2023,4,13) : new DateTime(2023,4,11,18,30,0,DateTimeKind.Utc);
        var c = new ZXing.Structures.CalendarEvent(title,isAllDay,s,e,location,description,eClass,organizer,priority,showAsBusy);
        var bytes = z.EncodeCalendarEvent(c, 330, this.overlay);
#if DEBUG
        Console.Write(c.ToString());
        File.WriteAllBytes($"output/{ title.Replace(" ","") }.png", bytes);
#endif
        var barcode = z.Decode(bytes, "QR_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo(c.ToString()));
    }

    [Test]
    [TestCase(false)]
    [TestCase(true)]
    [Category("Extensions")]
    public void TestEncodeExt_Contact(bool isMeCard) {
        var c = new ZXing.Structures.Contact("Jane Doe", new Structures.ComposedName("Jane", "Doe"),"ACME","Designer","555 321212", "555 321313", "", "jane.doe@acme.com", "Rua Central Park, 2 2A, 2795-242, Linda-a-Velha, Portugal", "www.ac.me", "Some notes");
        var bytes = z.EncodeContact(c, isMeCard, 200, null);
#if DEBUG
        File.WriteAllBytes($"output/contact_{(isMeCard?"mecard":"vcard")}.png", bytes);
#endif
        var barcode = z.Decode(bytes, "QR_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo(isMeCard?c.ToMeCardString():c.ToVCardString()));
    }

    [Test]
    [Category("Extensions")]
    public void TestEncodeExt_Email() {
        var bytes = z.EncodeEmail(@"andre.vieira@outsystems.com", 200, null);
#if DEBUG
        File.WriteAllBytes("output/email.png", bytes);
#endif
        var barcode = z.Decode(bytes, "QR_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo("mailto:andre.vieira@outsystems.com"));
    }

    [Test]
    [Category("Extensions")]
    public void TestEncodeExt_Location() {
        var bytes = z.EncodeLocation("38.7210876","-9.2390245", 200, null);
#if DEBUG
        File.WriteAllBytes("output/location.png", bytes);
#endif
        var barcode = z.Decode(bytes, "QR_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo("geo:38.7210876,-9.2390245"));
    }

    [Test]
    [TestCase("5553344222", false, "output/call.png")]
    [TestCase("5553344222", true, "output/facetime.png")]
    [Category("Extensions")]
    public void TestEncodeExt_PhoneNumber(string phoneNumber, bool isFacetime, string path) {
        var bytes = z.EncodePhoneNumber(phoneNumber, isFacetime, 200, null);
#if DEBUG
        File.WriteAllBytes(path, bytes);
#endif        
        var barcode = z.Decode(bytes, "QR_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo(isFacetime ? "facetime:5553344222" : "tel:5553344222"));
    }

    [Test]
    [Category("Extensions")]
    public void TestEncodeExt_SMS() {
        var bytes = z.EncodeSMS("5553322444","This is a message", 200, null);
#if DEBUG
        File.WriteAllBytes("output/sms.png", bytes);
#endif
        var barcode = z.Decode(bytes, "QR_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo("smsto:5553322444:This is a message"));
    }

    [Test]
    [Category("Extensions")]
    public void TestEncodeExt_Wifi() {
        var w = new Structures.Wifi("SUPERFAST-123","StrongerThanYouThink","WEP",false,"","","","");
        var bytes = z.EncodeWifi(w, 200, null);
#if DEBUG
        File.WriteAllBytes("output/wifi.png", bytes);
#endif
        var barcode = z.Decode(bytes, "QR_CODE");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(b.value, Is.EqualTo(w.ToString()));
    }

    [Test]
    [TestCase("png")]
    [TestCase("jpg")]
    [TestCase("bmp")]
    [TestCase("webp")]
    public void TestImageFormats(string format) {
        var contents = "This is a test";
        var bytes = z.Encode(contents, "CODE_128", 300, 100, 10, true, false, false, "UTF-8", null, null, null);        
#if DEBUG
        File.WriteAllBytes($"output/testformat.{format}", bytes);
#endif
        var barcode = z.Decode(bytes, "CODE_128");
        Assert.That(barcode, Is.Not.Null);
        var b = barcode.GetValueOrDefault();
        Assert.That(contents, Is.EqualTo(b.value));
    }
}